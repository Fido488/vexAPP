/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guiFrames;

import ActionPacks.matchReader;
import ActionPacks.matchWriter;
import Objects.MatchObject;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jonathanleitschuh
 */
public class matchListFrame extends javax.swing.JFrame {
    private ArrayList<MatchObject> matches = null;
    private DefaultTableModel model = new DefaultTableModel();
    
    

    /**
     * Creates new form matchListFrame
     */
    public matchListFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        matchTable = new javax.swing.JPanel();
        matchListScroll = new javax.swing.JScrollPane();
        matchList = new javax.swing.JTable();
        newMatchButton = new javax.swing.JButton();
        editMatchButton = new javax.swing.JButton();
        removeLastButton = new javax.swing.JButton();
        teamRatingButton = new javax.swing.JButton();
        backbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        getContentPane().setLayout(layout);

        matchTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Matches"));
        java.awt.GridBagLayout matchTableLayout = new java.awt.GridBagLayout();
        matchTableLayout.columnWidths = new int[] {0, 5, 0, 5, 0};
        matchTableLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        matchTable.setLayout(matchTableLayout);

        matchListScroll.setPreferredSize(new java.awt.Dimension(450, 400));

        matchReader read = new matchReader();
        try {
            matches = read.readMatchObject();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(teamsListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        matchList.setModel(model
        );
        matchList.getTableHeader().setReorderingAllowed(false);
        model.setColumnIdentifiers(new String[] {"Match #", "Red Isolation", "Red Interaction", "Red Score", "Blue Isolation", "Blue Interaction", "Blue Score"});
        for (MatchObject p : matches)
        {
            model.addRow(new Object[] {(p.getMatchNumber()+1), p.red.isolation.getTeamShortListNumb(), p.red.interaction.getTeamShortListNumb(),
                p.red.getScore(), p.blue.isolation.getTeamShortListNumb(), p.blue.interaction.getTeamShortListNumb(), p.blue.getScore()});

    }

    int nameWidth = 150;
    matchList.getColumnModel().getColumn(0).setPreferredWidth(15);
    matchList.getColumnModel().getColumn(0).setResizable(false);

    matchList.getColumnModel().getColumn(1).setPreferredWidth(nameWidth);
    matchList.getColumnModel().getColumn(1).setWidth(nameWidth);

    matchList.getColumnModel().getColumn(2).setPreferredWidth(nameWidth);
    matchList.getColumnModel().getColumn(2).setWidth(nameWidth);

    matchList.getColumnModel().getColumn(3).setPreferredWidth(20);
    matchList.getColumnModel().getColumn(3).setResizable(false);

    matchList.getColumnModel().getColumn(4).setPreferredWidth(nameWidth);
    matchList.getColumnModel().getColumn(4).setWidth(nameWidth);

    matchList.getColumnModel().getColumn(5).setPreferredWidth(nameWidth);
    matchList.getColumnModel().getColumn(5).setWidth(nameWidth);

    matchList.getColumnModel().getColumn(6).setPreferredWidth(20);
    matchList.getColumnModel().getColumn(6).setResizable(false);
    matchListScroll.setViewportView(matchList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.ipadx = 560;
    gridBagConstraints.ipady = 300;
    matchTable.add(matchListScroll, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridheight = 7;
    getContentPane().add(matchTable, gridBagConstraints);

    newMatchButton.setText("New Match");
    newMatchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            newMatchButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 8;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
    gridBagConstraints.insets = new java.awt.Insets(100, 0, 0, 0);
    getContentPane().add(newMatchButton, gridBagConstraints);

    editMatchButton.setText("Edit Match");
    editMatchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            editMatchButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 8;
    gridBagConstraints.gridy = 4;
    getContentPane().add(editMatchButton, gridBagConstraints);

    removeLastButton.setText("Remove Last");
    removeLastButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeLastButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 8;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
    getContentPane().add(removeLastButton, gridBagConstraints);

    teamRatingButton.setText("Overall Rating");
    teamRatingButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            teamRatingButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 8;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
    getContentPane().add(teamRatingButton, gridBagConstraints);

    backbutton.setText("<< Back");
    backbutton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            backbuttonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 12;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    getContentPane().add(backbutton, gridBagConstraints);

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMatchButtonActionPerformed
        // TODO add your handling code here:
        MatchObject newMatch = new MatchObject();
        newMatch.blue.setScore(0);
        newMatch.red.setScore(0);
        
        newMatch.red.interaction.setTeamLetter("");
        newMatch.red.isolation.setTeamLetter("");
        newMatch.blue.interaction.setTeamLetter("");
        newMatch.blue.isolation.setTeamLetter("");
        
        newMatch.red.interaction.setTeamName("");
        newMatch.red.isolation.setTeamName("");
        newMatch.blue.interaction.setTeamName("");
        newMatch.blue.isolation.setTeamName("");
        
        
        newMatch.setMatchNumber(matchList.getRowCount());
        model.addRow(new Object[] {(newMatch.getMatchNumber()+1), newMatch.red.isolation.getTeamShortListNumb(), newMatch.red.interaction.getTeamShortListNumb(),
                newMatch.red.getScore(), newMatch.blue.isolation.getTeamShortListNumb(), newMatch.blue.interaction.getTeamShortListNumb(), newMatch.blue.getScore()});
        
        matches.add(newMatch);
        matchWriter write = new matchWriter();
        try {
            write.writeMatchObjectSimple(newMatch);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(matchListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newMatchButtonActionPerformed

    private void editMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMatchButtonActionPerformed
        // TODO add your handling code here:
        
        try{
        matches.get(matchList.getSelectedRow());
        
        MatchTeamFrame frame = new MatchTeamFrame();
        frame.setMatchNumber(matchList.getSelectedRow());
        if((!"".equals(matches.get(matchList.getSelectedRow()).blue.interaction.getTeamName())) &&
                (!"".equals(matches.get(matchList.getSelectedRow()).blue.isolation.getTeamName())) &&
                (!"".equals(matches.get(matchList.getSelectedRow()).red.interaction.getTeamName())) &&
                (!"".equals(matches.get(matchList.getSelectedRow()).red.isolation.getTeamName()))){
            frame.setMatch(matches.get(matchList.getSelectedRow()));
        }
        
        frame.setBlueScore(matches.get(matchList.getSelectedRow()).blue.getScore());
        frame.setRedScore(matches.get(matchList.getSelectedRow()).red.getScore());
        
        
        
        
        frame.setSize(this.getWidth(), getHeight());
        frame.setLocation(this.getX(), this.getY());
        frame.setVisible(true);
        this.dispose();
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please Select a Match From the List", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
        
    }//GEN-LAST:event_editMatchButtonActionPerformed

    private void teamRatingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamRatingButtonActionPerformed
        // TODO add your handling code here:
        teamRankingFrame frame = new teamRankingFrame();
        frame.setSize(this.getWidth(), getHeight());
        frame.setLocation(this.getX(), this.getY());
        frame.setVisible(true);
        //this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_teamRatingButtonActionPerformed

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed
        // TODO add your handling code here:
        startFrameSimple frame = new startFrameSimple();
        frame.setSize(this.getWidth(), getHeight());
        frame.setLocation(this.getX(), this.getY());
        frame.setVisible(true);
        //this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_backbuttonActionPerformed

    private void removeLastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLastButtonActionPerformed
        try {
            // TODO add your handling code here:
            model.removeRow((matchList.getRowCount()-1));
            matches.remove((matchList.getRowCount()));
            matchWriter write = new matchWriter();
            
            write.replaceMatchObject(matches);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(matchListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_removeLastButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(matchListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(matchListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(matchListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(matchListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new matchListFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbutton;
    private javax.swing.JButton editMatchButton;
    private javax.swing.JTable matchList;
    private javax.swing.JScrollPane matchListScroll;
    private javax.swing.JPanel matchTable;
    private javax.swing.JButton newMatchButton;
    private javax.swing.JButton removeLastButton;
    private javax.swing.JButton teamRatingButton;
    // End of variables declaration//GEN-END:variables
}
